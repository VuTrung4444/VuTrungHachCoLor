repeat task.wait() until game:IsLoaded()

local Library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local Subs = Library.subs
local IsOpen = Subs.Wait

local mainMenuPlaceID = 5956785391

local DailySpinEnabled = false
local ClanSpinEnabled = false


local legendaryClans = {"Shinazugawa", "Kocho", "Sabito", "Tamayo", "Kuwajima", "Makamo"}
local mythicClans = {"Tomioka", "Tokito", "Hashibira", "Soyama"}
local supremeClans = {"Kamado", "Agatsuma", "Rengoku", "Uzui"}

local huntLegendary = false  
local huntMythic = false  
local huntSupreme = true

local function getFilteredClans()
    local targetClans = {}
    if huntLegendary then
        for _, clan in ipairs(legendaryClans) do
            table.insert(targetClans, clan)
        end
    end
    if huntMythic then
        for _, clan in ipairs(mythicClans) do
            table.insert(targetClans, clan)
        end
    end
    if huntSupreme then
        for _, clan in ipairs(supremeClans) do
            table.insert(targetClans, clan)
        end
    end
    return targetClans
end

local function autoSpinClan()
    task.spawn(function()
        local players = game:GetService("Players")
        local replicatedStorage = game:GetService("ReplicatedStorage")

        local localPlayer = players.LocalPlayer
        local playerData = replicatedStorage:WaitForChild("Player_Data")
        local localData = playerData:WaitForChild(localPlayer.Name)
        local clan = localData:FindFirstChild("Clan")

        local remotes = replicatedStorage:WaitForChild("Remotes")
        local sendServer = remotes:WaitForChild("To_Server")
        local handleSpin = sendServer:WaitForChild("Handle_Initiate_S_")

        handleSpin:InvokeServer("check_can_spin")
        task.wait(1)

        while ClanSpinEnabled do
            local targetClans = getFilteredClans()

            if clan and table.find(targetClans, clan.Value) then
                ClanSpinEnabled = false
                break
            else
                handleSpin:InvokeServer("check_can_spin")
            end
        end
    end)
end

local function autoSpinAndClaim()
    task.spawn(function()
        while DailySpinEnabled do
            local player = game.Players.LocalPlayer
            local spinsFolder = player:FindFirstChild("daily_spins_folder")
            local remote = game.ReplicatedStorage:FindFirstChild("spins_thing_remote")

            if spinsFolder and remote then
                local dailySpins = spinsFolder:FindFirstChild("SpinsToday")
                if dailySpins and dailySpins.Value > 0 then
                    remote:InvokeServer()
                else
                    DailySpinEnabled = false
                end
            end
        end
    end)
end


if game.PlaceId == mainMenuPlaceID then
    local MainWindow = Library:CreateWindow({
        Name = "HackerLor | TksMyWife",
        Themeable = {
            Info = "VTrungHackerLor",
            Credit = false,
            Background = "",
            Visible = true
        }
    })

    local DailyTab = MainWindow:CreateTab("Main")

    -- Section Daily Spin
    local DailySection = DailyTab:CreateSection({Name = "Spin", Side = "Left"})
    DailySection:AddToggle({
        Name = "Auto Daily Spin",
        Flag = "AutoDailySpin",
        Callback = function(state)
            DailySpinEnabled = state
            if state then
                autoSpinAndClaim()
            end
        end
    })

    DailySection:AddToggle({
        Name = "Auto Spin Clan",
        Flag = "AutoSpinClan",
        Callback = function(state)
            ClanSpinEnabled = state
            if state then
                autoSpinClan()
            end
        end
    })

local ClanChooseSection = DailyTab:CreateSection({Name = "TròChơiNhânPhẩm", Side = "Right"})

ClanChooseSection:AddToggle({
    Name = "Săn Legendary Clan",
    Flag = "HuntLegendary",
    Callback = function(state)
        huntLegendary = state
    end,
    State = false  
})

ClanChooseSection:AddToggle({
    Name = "Săn Mythic Clan",
    Flag = "HuntMythic",
    Callback = function(state)
        huntMythic = state
    end,
    State = false  
})

ClanChooseSection:AddToggle({
    Name = "Săn Supreme Clan",
    Flag = "HuntSupreme",
    Callback = function(state)
        huntSupreme = state
    end,
    State = true
})
end
--// Variables \\--
local plr = game:GetService("Players").LocalPlayer

local function updateCharacterReferences(character)
	local hrp = character:WaitForChild("HumanoidRootPart")
		_G.Character = character
		_G.HumanoidRootPart = hrp
end
	if plr.Character then
		updateCharacterReferences(plr.Character)
	end
	plr.CharacterAdded:Connect(function(character)
    updateCharacterReferences(character)
end)

local insert = table.insert 
local character = plr.Character
local PlrHumanoidRootPart = character:WaitForChild("HumanoidRootPart")

local plr = game.Players.LocalPlayer
local Character = plr.Character or plr.CharacterAdded:Wait()	
local Humanoid = Character and Character:WaitForChild("Humanoid")
local WalkSpeed = 150
local JumpPower = 150

plr.CharacterAdded:Connect(function(Char)
    Character = Char
    Humanoid = Character:WaitForChild("Humanoid")

    -- Cập nhật tốc độ và sức bật ngay khi nhân vật xuất hiện
    if WalkSpeed then
        Humanoid.WalkSpeed = WalkSpeed
    end
    if JumpPower then
        Humanoid.JumpPower = JumpPower
    end
end)

game:GetService("RunService").Stepped:Connect(function()
    if Character and Humanoid then
        -- Giữ tốc độ chạy cố định
        if Humanoid.WalkSpeed ~= WalkSpeed then
            Humanoid.WalkSpeed = WalkSpeed
        end
        
        -- Giữ sức bật cố định
        if Humanoid.JumpPower ~= JumpPower then
            Humanoid.JumpPower = JumpPower
        end
    end
end)

plr.CharacterAdded:Connect(function(Char)
    Character = Char
    Humanoid = Character:WaitForChild("Humanoid")

    -- Đặt lại tốc độ ngay lập tức
    task.wait(0.1) -- Chờ game cập nhật xong
    Humanoid.WalkSpeed = WalkSpeed
    Humanoid.JumpPower = JumpPower
end)

local AtBoss = false
local SkillCooldowns = {}
local SelectedSkills = {"Z", "X", "C", "V"} -- Danh sách kỹ năng hợp lệ
local skill = SelectedSkills[1] -- Lấy kỹ năng đầu tiên

function GetCooldownTime(skill)
    -- Giả lập dữ liệu hồi chiêu
    local cooldowns = {Z = 5, X = 5, C = 5, V = 5, B = 5, N = 5}
    return cooldowns[skill] or nil
end


local function UseSkill(skill)
    if IsSkillReady(skill) then
        VirtualInputManager:SendKeyEvent(true, skill, false, game)
        SkillCooldowns[skill] = tick() -- Lưu thời gian sử dụng skill
    end
end


local function IsSkillReady(skill)
    local lastUsed = SkillCooldowns[skill] or 0
    local cooldownTime = GetCooldownTime(skill) -- Hàm giả định lấy thời gian hồi chiêu của skill
    return (tick() - lastUsed) >= cooldownTime
end

local VirtualInputManager = game:GetService("VirtualInputManager")
local AutoSkillEnabled = false -- Biến điều khiển Auto Skill
local SkillStates = {
    Z = false,
    X = false,
    C = false,
    V = false,
    B = false,
    N = false
}


if not VirtualInputManager or not VirtualInputManager.SendKeyEvent then
    error("❌ VirtualInputManager không hỗ trợ SendKeyEvent! Không thể tiếp tục.")
end

-- Hàm dùng kỹ năng
local function UseSkill(skillKey)
    local keycode = Enum.KeyCode[skillKey]
    -- Nhấn phím
    VirtualInputManager:SendKeyEvent(true, keycode, false, game)
    task.wait(0.2) -- Chờ một chút
    -- Nhả phím
    VirtualInputManager:SendKeyEvent(false, keycode, false, game)
end


-- Hàm chạy Auto Skill
local function AutoSkillLoop()
    while AutoSkillEnabled do
        if AtBoss then -- Chỉ dùng kỹ năng khi đã đến gần boss
            local skillUsed = false

            for _, skill in ipairs({"Z", "X", "C", "V", "B", "N"}) do
                if AutoSkillEnabled and SkillStates[skill] then
                    if IsSkillReady(skill) then 
                        UseSkill(skill)
                        skillUsed = true
                    end
                end
            end
            
            if skillUsed then
                task.wait(0.5)
            else
                task.wait(0.1) 
            end
        else
            task.wait(0.1) -- Đợi tiếp nếu chưa tới boss
        end
    end
end


---Flower----
local RunService = game:GetService("RunService");
local Players = game:GetService("Players");
local Player = Players.LocalPlayer;
local chr = Player.Character
local root = chr and chr:FindFirstChild("HumanoidRootPart")

local AutoCollectLilys = false
local NextFrame = RunService.Heartbeat;


local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")
local player = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local DrumRemote = Remotes:WaitForChild("war_Drums_remote")
local Map = Workspace:WaitForChild("Map")




local activeToggle = nil
local toggles = {}

--// Tween \\--
local function GetDistance(Endpoint)
    if typeof(Endpoint) == "Instance" then
        Endpoint = Vector3.new(Endpoint.Position.X, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y, Endpoint.Position.Z)
    elseif typeof(Endpoint) == "CFrame" then
        Endpoint = Vector3.new(Endpoint.Position.X, game.Players.LocalPlayer.Character.HumanoidRootPart.Position.Y, Endpoint.Position.Z)
    end
    local Magnitude = (Endpoint - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
    return Magnitude
end

function Tween(Endpoint)
  if typeof(Endpoint) == "Instance" then
        Endpoint = Endpoint.CFrame
    end
    local TweenFunc = {}
    local Distance = GetDistance(Endpoint)
    local TweenInfo = TweenInfo.new(Distance / getgenv().tweenspeed, Enum.EasingStyle.Linear)

    local targetCFrame = Endpoint

    -- Giữ nguyên hướng nhìn khi ở chế độ "Above" hoặc "Below"
    if FarmMethod == "Above" then
        targetCFrame = CFrame.new(Endpoint.Position) * CFrame.Angles(math.rad(-90), 0, 0)
    elseif FarmMethod == "Below" then
        targetCFrame = CFrame.new(Endpoint.Position) * CFrame.Angles(math.rad(90), 0, 0)
    end

    local TweenObj = game:GetService("TweenService"):Create(
        game.Players.LocalPlayer.Character.HumanoidRootPart, 
        TweenInfo, 
        { CFrame = targetCFrame }
    )
    TweenObj:Play()

    function TweenFunc:Cancel()
        TweenObj:Cancel()
        return false
    end

    if Distance <= 100 then
        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = targetCFrame
        TweenObj:Cancel()
        return false
    end

    return TweenFunc
end

local function EnableAntiFall()
    local plr = game.Players.LocalPlayer
    if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local humanoidRootPart = plr.Character.HumanoidRootPart
    if not humanoidRootPart:FindFirstChild("BodyVelocity") then
        local antifall = Instance.new("BodyVelocity")
        antifall.Velocity = Vector3.new(0, 0, 0)
        antifall.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        antifall.Name = "BodyVelocity"
        antifall.Parent = humanoidRootPart
    end
end

local function DisableAntiFall()
    local plr = game.Players.LocalPlayer
    if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
        return
    end

    local humanoidRootPart = plr.Character.HumanoidRootPart
    local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
    local antifall = humanoidRootPart:FindFirstChild("BodyVelocity")

    -- Xóa lực AntiFall nếu tồn tại
    if antifall then
        antifall:Destroy()
        task.wait(0.1) -- Chờ một chút để chắc chắn rằng BodyVelocity đã bị xóa
    end

    -- Đặt lại vận tốc để tránh bị giữ lại bởi lực cũ
    humanoidRootPart.Velocity = Vector3.new(0, 0, 0)
    humanoidRootPart.AssemblyLinearVelocity = Vector3.new(0, 0, 0)

    -- Đảm bảo nhân vật có thể di chuyển
    if humanoid then
        humanoid.PlatformStand = false  -- Ngăn trạng thái đứng yên cứng
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)  -- Đưa nhân vật về trạng thái bình thường
        task.wait(0.1)  -- Chờ một chút để trạng thái được cập nhật

        -- Nhảy ngay lập tức để kiểm tra xem có bị khóa không
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end


--// Get Closest \\---
function IsEntitySelected(entity, selectedEntities)
    for _, selectedEntity in ipairs(selectedEntities) do
        if entity.Name == selectedEntity then
            return true
        end
    end
    return false
end



function getclosest(selectedEntities, parentFolder)
    local closestEntity = nil
    local closestDistance = math.huge

    local entities = parentFolder:GetDescendants()

    for i, entity in ipairs(entities) do
        if entity:IsA("Model") and IsEntitySelected(entity, selectedEntities) then
            local entityName = entity.Name
            local humanoid = entity:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
                local entityCFrame = entity:GetModelCFrame()
                local distance = (entityCFrame.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestEntity = entity
                end
            end
        end
    end

    return closestEntity
end


--// Tables \\--
local AllowedBosses = {
    "Snow Trainee",
    "Sound Trainee",
    "Akaze",
    "Douma",
    "Enme",
    "Renpeke",
    "Muichiro Tokito",
    "Tengen",
    "Rengoku",
    "Inosuke",
    "Swampy",
    "Shiron",
    "Zanegutsu Kuuchie",
    "Sabito",
    "Sanemi",
    "Nezuko",
    "Giyu",
    "Slasher",
    "Susamaru",
    "Yahaba",
	"Bandit Kaden",
	"Nomay Bandit Boss",
}

local BossLocationsMap1 = {
    { Name = "Shiron", Position = Vector3.new(3228.2385, 380, -3978.56933) },
    { Name = "Giyu", Position = Vector3.new(3010.59, 316.95, -2924.11) },
    { Name = "Nezuko", Position = Vector3.new(3556.5, 342.21, -4565.22) },
    { Name = "Slasher", Position = Vector3.new(4365.71, 342.21, -4438.91) },
    { Name = "Sanemi", Position = Vector3.new(1654, 348.46, -3737.69) },
    { Name = "Yahaba", Position = Vector3.new(1409.45, 315.9, -4647.8) },
    { Name = "Susamaru", Position = Vector3.new(1367.45, 315.9, -4553.09) },
    { Name = "Bandit Kaden", Position = Vector3.new(-546.917, 304.467, -2860.067) },
    { Name = "Zanegutsu Kuuchie", Position = Vector3.new(-351.28, 445.36, -2331.425) },
    { Name = "Sabito", Position = Vector3.new(1237.92, 275.42, -2807.998) }
}

local BossLocationsMap2 = {
    { Name = "Akeza", Position = Vector3.new(2006.46, 566, -130.2) },
    { Name = "Inosuke", Position = Vector3.new(1592.34, 299.98, -388.1) },
    { Name = "Enme", Position = Vector3.new(1591.18, 495.61, -685.5775) },
    { Name = "Renpeke", Position = Vector3.new(-1265, 600.57, -659.554) },
    { Name = "Swampy", Position = Vector3.new(-1364.28, 600.96875, -223.2) },
    { Name = "Sound Trainee", Position = Vector3.new(1881.34, 675.42, -2800.46) },
    { Name = "Tengen", Position = Vector3.new(1460.45, 486.122, -3137.05) },
    { Name = "Snow Trainee", Position = Vector3.new(255.18, 530.94, -2989.45) },
    { Name = "Douma", Position = Vector3.new(-0.146, 512.331, -1674.79) },
    { Name = "Muichiro Tokito", Position = Vector3.new(4513.83, 672.41, -559.748) },
    { Name = "Rengoku", Position = Vector3.new(3654.3999, 672.91, -348.877) },
    { Name = "Slasher", Position = Vector3.new(908.402, 487.295, -1351.5653) },
	{ Name = "Nomay Bandit Boss", Position = Vector3.new(3467.59399, 673.1099, -1882.6058) }
}

local Map1 = {
    ["Kiribating Village"] = CFrame.new(120, 282, -1743),
    ["Zapiwara Cave"] = CFrame.new(-38, 275, -2403),
    ["Ushumaro Village"] = CFrame.new(-90, 354, -3170),
    ["Butterfly Mansion"] = CFrame.new(3001, 316, -3806),
    ["Final Selection"] = CFrame.new(5258, 365, -2422),
    ["Zapiwara Mountain"] = CFrame.new(-366, 425, -2371),
    ["Wind Trainer"] = CFrame.new(1797, 334, -3466),
    ["Kabiwaru Village"] = CFrame.new(2015, 315, -3051),
    ["Waroru Cave"] = CFrame.new(689, 261, -2469),
    ["Ouwbayashi Home"] = CFrame.new(1241, 320, -4568),
    ["Dangerous Woods"] = CFrame.new(3839, 342, -4177)
}

local Map2 = {
    ["Nomay Village"] = CFrame.new(3562, 673, -2109),
    ["Mugen Train Station"] = CFrame.new(783, 495, 900),
    ["Wop City"] = CFrame.new(-31, 599, -431),
    ["Village 2"] = CFrame.new(1215, 567, 95),
    ["Cave 1"] = CFrame.new(4252, 671, 581),
    ["Cave 2"] = CFrame.new(1182, 485, -1192),
    ["Mist trainer location"] = CFrame.new(4324, 671, -569),
    ["Akeza Cave"] = CFrame.new(1902, 554, -150),
    ["Frozen Lake"] = CFrame.new(2049, 481, -769),
    ["Beast Cave"] = CFrame.new(1840, 481, 37),
    ["Wop's training grounds"] = CFrame.new(223, 595, 483),
    ["Snowy Place"] = CFrame.new(379, 531, -2865),
    ["Devourers Jaw"] = CFrame.new(480, 507, -1864),
    ["Sound Cave"] = CFrame.new(1828, 487, -2770)
}


local SelectedMap = nil -- Mặc định không có Map nào được chọn
local LocationsDropdown, BossesDropdown -- Lưu Dropdown để cập nhật danh sách
local Map1List, Map2List, BossesMap1List, BossesMap2List = {}, {}, {}, {}
local LocationsToUse, BossesToUse = {}, {}
local ActiveBossLocations = {}

-- Điền danh sách địa điểm & Boss CHỈ MỘT LẦN
for name, _ in pairs(Map1) do
    table.insert(Map1List, name)
end
for name, _ in pairs(Map2) do
    table.insert(Map2List, name)
end
for name, _ in pairs(BossLocationsMap1) do
    table.insert(BossesMap1List, name)
end
for name, _ in pairs(BossLocationsMap2) do
    table.insert(BossesMap2List, name)
end



local AllowedMobs = {
    "Civilian",
    "Heikin Demon",
    "Slasher",
    "Nomay Bandit",
    "Nomay Bandit Boss",
    "Yowai Demon",
    "Thief",
    "Mizunoto Demon Slayer",
}

local raceTable = {
    [1] = "Human",
    [2] = "Slayer",
    [3] = "Demon",
    [4] = "Hybrid"
}

local SelectedBosses = {}
local Bosses = {}
local mobs = {}

local GodModes = {
	"scythe_asteroid_reap",
    "Water_Surface_Slash",
    "insect_breathing_dance_of_the_centipede",
    "blood_burst_explosive_choke_slam",
    "explosive_demon_art_blood_burst",
    "Wind_breathing_black_wind_mountain_mist",
    "flame_breathing_flaming_eruption",
    "Beast_breathing_devouring_slash",
    "akaza_bda_compass_needle",
    "dream_bda_flesh_monster",
    "swamp_bda_swamp_domain",
    "snow_breathing_illusory_Storm",
    "sound_breathing_smoke_screen",
    "ice_demon_art_bodhisatva",
}

--// Kill Aura \\--
local function attack(method)
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, 919, "ground_slash")
    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer(method, plr, plr.Character, plr.Character.HumanoidRootPart, plr.Character.Humanoid, math.huge, "ground_slash")
end

local attackMethods = {
    ["Combat"] = 'fist_combat',
    ["Sword"] = 'Sword_Combat_Slash',
    ["Scythe"] = 'Scythe_Combat_Slash',
    ["Claw"] = 'claw_Combat_Slash',
    ["Fans"] = 'fans_combat_slash',
}

local godModeState = false
local godModeToggle = {}-- Khai báo trước nhưng chưa gán

--// Main Script \\--
local library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local Subs = library.subs
local IsOpen = Subs.Wait

local Window = library:CreateWindow({
    Name = "HackerLor | DMM DianaVsRice",
    Themeable = {
        Info = "VTrungHackerLor",
        Credit = false,
        Background = "",
        Visible = true
    }
})

--// Main Tab \\--
local MainTab = Window:CreateTab({Name = "Main"})
local MainSection = MainTab:CreateSection({Name = "Farming"})
local Settings = MainTab:CreateSection({Name = "Settings"})
local KillAura = MainTab:CreateSection({Name = "Kill Aura", Side = "Right"})
local Teleports = MainTab:CreateSection({Name = "Teleports", Side = "Right"})
local Info = MainTab:CreateSection({Name = "Info", Side = "Right"})
local BossesTab = MainTab:CreateSection({Name = "", Side = "Left"})


--// Misc Tab \\--
local MiscTab = Window:CreateTab({Name = "Misc"})
local MiscSection = MiscTab:CreateSection({Name = "Misc"})
local GodModeQuick = MiscTab:CreateSection({Name = "GMQ", Side = "Right"})
local AutoSkills = MiscTab:CreateSection({Name = "AutoSkills", Side = "Left"})
local SpeedAndJump = MiscTab:CreateSection({Name = "Speed&Jump", Side = "Right"})
local Ect = MiscTab:CreateSection({Name = "Ect", Side = "Left"})

local Debree = Workspace:WaitForChild("Debree")
local EctFolder = ReplicatedStorage:WaitForChild("Misc")
local Clashing = EctFolder:WaitForChild("Clashing")

MainSection:AddToggle({
    Name = "Farm",
    Flag = "FarmSelectedBosses",
    Callback = function (v)
        getgenv().Farm = v
            if antifallActive ~= nil and antifallActive then
                antifallActive = false
                DisableAntiFall() -- Gọi hàm sửa lỗi để tắt AntiFall

                local plr = game.Players.LocalPlayer
                if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    local humanoidRootPart = plr.Character.HumanoidRootPart
                    local humanoid = plr.Character:FindFirstChildOfClass("Humanoid") 
                        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            	end
           end
    end
})

MainSection:AddToggle({
    Name = "Move Around [Arrow]",
    Flag = "MoveAroundBosses",
    Callback = function(v)
        getgenv().MoveAround = v
        if not v then
            local plr = game.Players.LocalPlayer
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local humanoid = plr.Character:FindFirstChildOfClass("Humanoid")
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end
})

MainSection:AddToggle({
    Name = "Arrow Aura [Near Mobs]",
    Flag = "Arrow",
    Callback = function (v)
        getgenv().Arrow = v
    end
})

MainSection:AddToggle({
    Name = "Arrow Aura [NoLag]",
    Flag = "ArrowAll",
    Callback = function (v)
        getgenv().AllArrow = v
    end
})



MainSection:AddTextbox({
    Name = 'Player Target',
    Placeholder = '...',
    Flag = 'Player Name',
    Callback = function(v)
        getgenv().selectedPlayerName = v
    end
})

MainSection:AddToggle({
    Name = "Arrow Aura [Target Player]",
    Flag = "ArrowTargeted",
    Callback = function (v)
        getgenv().TargetPlayersArrow = v
    end
})


--// Settings \\--
Settings:AddDropdown({
    Name = "Farm Method",
    List = {"Above","Behind","Below"},
    Flag = "FarmMethodSelection",
    Nothing = "Select Method...",
	Value = "Above",
    Callback = function(Chosen)
        FarmMethod = Chosen 
    end
})

Settings:AddSlider({
    Name = "Distance",
    Flag = "DistanceSlider",
    Value = 8,
    Min = 1,
    Max = 200,
    Textbox = true,
    Callback = function(Value)
        getgenv().Distance = Value
    end
})

Settings:AddSlider({
    Name = "Tween Speed",
    Flag = "TweenSlider",
    Value = 300,
    Min = 150,
    Max = 500,
    Textbox = true,
    Callback = function(Value)
        getgenv().tweenspeed = Value
    end
})

--// Kill Aura \\--
KillAura:AddToggle({
    Name = "Kill Aura",
    Flag = "KillAuraToggle",
    Callback = function (v)
        getgenv().KillAura = v
    end
})


local weapons = {"Sword", "Combat", "Scythe", "Fans", "Claw"}
local toggles = {}
local activeToggle = nil

for _, weapon in ipairs(weapons) do
    local toggle = KillAura:AddToggle({
        Name = weapon,
        Flag = "KillAuraWeapon_" .. weapon,
        Callback = function(state)
            if state then
                -- Tắt toggle trước đó nếu có và khác với toggle hiện tại
                if activeToggle and activeToggle ~= toggle then
                    activeToggle:SetState(false)
                end
                -- Cập nhật toggle hiện tại và thiết lập Method
                activeToggle = toggle
                Method = weapon
                print("Weapon Selected: " .. weapon)
            else
                -- Chỉ clear nếu chính toggle hiện tại bị tắt
                if activeToggle == toggle then
                    activeToggle = nil
                    Method = nil
                    print("Weapon Deselected")
                end
            end
        end
    })

    toggles[weapon] = toggle
end

Teleports:AddButton({
    Name = "Skibidi To",
    Callback = function()
        local Player = game.Players.LocalPlayer
        local Character = Player.Character or Player.CharacterAdded:Wait()
        local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")

        if not HumanoidRootPart then
            warn("⚠️ Lỗi: Không tìm thấy HumanoidRootPart!")
            return
        end

        -- Kiểm tra SelectedArea hợp lệ
        if not SelectedArea or SelectedArea == "" then
            warn("⚠️ Lỗi: Chưa chọn khu vực để dịch chuyển!")
            return
        end

        -- Xác định MapToUse dựa trên Map đã chọn
        local MapToUse = {}
        if SelectedMap == "Map1" then
            MapToUse = Map1
        elseif SelectedMap == "Map2" then
            MapToUse = Map2
        else
            warn("⚠️ Lỗi: Chưa chọn Map hợp lệ!")
            return
        end

        -- Kiểm tra Place hợp lệ
        local Place = MapToUse[SelectedArea]
        if not Place then
            warn("⚠️ Lỗi: Không tìm thấy tọa độ của khu vực [" .. SelectedArea .. "] trong Map [" .. SelectedMap .. "]!")
            return
        end

        -- Dịch chuyển tức thời
        HumanoidRootPart.CFrame = Place * CFrame.new(0, 5, 0)
        print("✅ Dịch chuyển thành công!")
    end
})

-- Dropdown danh sách địa điểm (ban đầu trống)
LocationsDropdown = Teleports:AddDropdown({
    Name = "Locations",
    Nothing = "Select Location...",
    Flag = "LocationSelect",
    List = LocationsToUse, -- Cập nhật danh sách mới
    Callback = function(State)
        SelectedArea = State
    end
})

-- Dropdown danh sách Boss (ban đầu trống)
BossesDropdown = Teleports:AddDropdown({
    Name = "Farm Bosses",
    Nothing = "Select Boss...",
    Flag = "BossSelect",
    List = {}, -- Ban đầu danh sách rỗng
    Callback = function(State)
        SelectedBoss = State
    end
})


--// Info \\--
Info:AddLabel("")
Info:AddLabel("")
local infoLabel = Info:AddLabel("")
Info:AddLabel("")
Info:AddLabel("")

--// Living Bosses \\--

BossesTab:AddLabel("")
BossesTab:AddLabel("")
BossesTab:AddLabel("")
BossLabel = BossesTab:AddLabel("")
BossesTab:AddLabel("")
BossesTab:AddLabel("")
BossesTab:AddLabel("")

--// Misc Section \\--
MiscSection:AddToggle({
    Name = "Auto Collect Chest",
    Flag = "CollectAllChest",
    Keybind = false,
    Callback = function (v)
        AutoCollectChest = v
    end
})


SpeedAndJump:AddSlider({
    Name = "WalkSpeed",
    Value = 280,
    Min = 16,
    Max = 300,
    Flag = "WalkSpeed",
	Textbox = true,
    Callback = function(State)
        WalkSpeed = State
        if game.Players.LocalPlayer.Character then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = WalkSpeed
            end
        end
    end
})

SpeedAndJump:AddSlider({
    Name = "JumpPower",
    Value = 150,
    Min = 50,
    Max = 1000,
    Flag = "JumpPower",
	Textbox = true,
    Callback = function(State)
        JumpPower = State
        if game.Players.LocalPlayer.Character then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid.JumpPower = JumpPower
            end
        end
    end
})

--GodModeState--
local UIS = game:GetService("UserInputService")

local godModeToggle = GodModeQuick:AddToggle({
    Name = "Enable God Mode",
    Flag = "ENG_Toggle",
    keybind = "R", 
    Callback = function(v)
        godModeState = v
        ENG = v
    end
})

local function toggleGodMode(state)
    godModeState = state
    ENG = state

    -- Cập nhật giao diện của toggle
    if godModeToggle.Callback then
        task.spawn(function()
            godModeToggle.Callback(state)
        end)
    end
end

local godModeButton = GodModeQuick:AddButton({
    Name = "Enable God Mode",
    Callback = function()
        toggleGodMode(not godModeState) 
    end
})


UIS.InputBegan:Connect(function(input, gameProcessed)
    if not gameProcessed and input.KeyCode == Enum.KeyCode.R then
        toggleGodMode(not godModeState)
    end
end)

for _, godMode in ipairs(GodModes) do
    local toggle = GodModeQuick:AddToggle({
        Name = godMode,
        Flag = "Gm_" .. godMode,
        Callback = function(state)
            if state then

                if activeToggle and activeToggle ~= toggle then
                    activeToggle:SetState(false)
                end

                activeToggle = toggle
                getgenv().GodSelected = godMode
            else

                if activeToggle == toggle then
                    activeToggle = nil
                    getgenv().GodSelected = nil
                end
            end
        end
    })

    toggles[godMode] = toggle
end


MiscSection:AddToggle({
    Name = "War Drums",
    Value = false, 
    Flag = "WarDrums",
    Callback = function(State)
        TLROAPSMG = State 
        while TLROAPSMG and IsOpen() do 
            DrumRemote:FireServer(true)
            task.wait(7.5)
        end     
    end 
})

MiscSection:AddToggle({
    Name = "Kamado God Mode [Kamado]",
    Flag = "KamadoGod",
    Keybind = false,
    Callback = function (v)
        if v then
            game:GetService("ReplicatedStorage").Remotes.heal_tang123asd:FireServer(true)
        else
            game:GetService("ReplicatedStorage").Remotes.heal_tang123asd:FireServer(false)
        end
    end
})

local Player = game.Players.LocalPlayer
local playerName = Player.Name  

MiscSection:AddToggle({
    Name = "Hybrid(Ngulắmmớiđemkhoe)",
    Flag = "HybridToggle",
    Keybind = false,
    Callback = function(v)
        local playerData = game:GetService("ReplicatedStorage").Player_Data
        local currentPlayerSlot = playerData:FindFirstChild(playerName)

        if currentPlayerSlot and currentPlayerSlot:FindFirstChild("Race") then
            if v then
                if currentPlayerSlot.Race.Value ~= 4 then
                    currentPlayerSlot.Race.Value = 4 
                end
            else
                if currentPlayerSlot.Race.Value ~= 3 then
                    currentPlayerSlot.Race.Value = 3  
                end
            end
        end
    end
})


MiscSection:AddToggle({
    Name = "Heart Ablaze [Human]",
    Flag = "HeartAblaze",
    Keybind = false,
    Callback = function (v)
        if v then
            game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(true)
        else
            game:GetService("ReplicatedStorage").Remotes.heart_ablaze_mode_remote:FireServer(false)
        end
    end
})

MiscSection:AddToggle({
    Name = "Thunder Mode [Human]",
    Flag = "Thunder",
    Keybind = false,
    Callback = function (v)
        if v then
            game:GetService("ReplicatedStorage").Remotes.thundertang123:FireServer(true)
        else
            game:GetService("ReplicatedStorage").Remotes.thundertang123:FireServer(false)
        end
    end
})


MiscSection:AddToggle({
    Name = "No Sun Dmg",
    Flag = "NS",
    Callback = function (v)
        if game:GetService("Players").LocalPlayer.PlayerScripts.Small_Scripts.Gameplay:FindFirstChild("Sun_Damage") then
            if v == true then
                    game:GetService("Players").LocalPlayer.PlayerScripts.Small_Scripts.Gameplay.Sun_Damage.Disabled = true                
                end
            end
    end
})


MiscSection:AddToggle({
    Name = "Boss Damage Log Spoof",
    Flag = "BDLS",
    Keybind = false,
    Callback = function (v)
        getgenv().hide_userdmg = v
    end
})



AutoSkills:AddToggle({
    Name = "Auto Skill",
    Flag = "AutoSkillEnabled",
    Callback = function(state)
        AutoSkillEnabled = state
        local skill = SelectedSkill or "Z"

        if state then
            task.spawn(AutoSkillLoop)
        end
    end
})

for _, skill in ipairs({"Z", "X", "C", "V", "B", "N"}) do
    AutoSkills:AddToggle({
        Name = "Use Skill " .. skill,
        Flag = "UseSkill" .. skill,
        Callback = function(state)
            SkillStates[skill] = state
        end
    })
end

local AutoEatSouls = false

Ect:AddToggle({
    Name = "Auto Eat Souls",
    Value = false,
    Flag = "Souls",
    Callback = function(State)
        AutoEatSouls = State
    end
})

Ect:AddToggle({
    Name = "Auto Collect Orbs",
    Value = false,
    Flag = "AutoOrb",
    Callback = function(State)
        LIPJRMAL = State

        task.spawn(function()
            while LIPJRMAL and IsOpen() do
                if not HumanoidRootPart or not HumanoidRootPart.Parent then
                    HumanoidRootPart = plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
                end

                for _, v in ipairs(Map:GetChildren()) do
                    if v:IsA("Model") and v:FindFirstChild("Sound") then
                        for _, v1 in ipairs(v:GetChildren()) do
                            if v1:FindFirstChild("TouchInterest") then
                                v:PivotTo(HumanoidRootPart.CFrame)
                            end
                        end
                    end
                end

                task.wait(0.5)
            end
        end)
    end
})

local Formatted = ("%svs"):format(Player.Name)
Ect:AddToggle({
    Name = "Auto Clash",
    Value = false, 
    Flag = "AutoClash",
    Callback = function(State)
        LRIEPMFLA = State 
        while LRIEPMFLA and IsOpen() do -- what the fuck is this
            local ClashFolder = Debree:FindFirstChild("clash_folder") 
            if ClashFolder then 
                for i,v in next, ClashFolder:GetChildren() do 
                    if v.Name:find(Formatted) then 
                        local Points = v:FindFirstChild(Player.Name) 
                        if not Points then continue end 
                        spawn(function()
                            task.wait(7.5) 
                            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("Change_Value", Points, 99999999999)
                        end)
                    else 
                        for i1,Points in next, v:GetChildren() do 
                            if Players:FindFirstChild(Points.Name) then 
                                spawn(function()
                                    task.wait(7.5) 
                                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("Change_Value", Points, 99999999999)
                                end)
                            end 
                        end 
                    end 
                end 
            end 
            local Found = Clashing:FindFirstChild(Player.Name)
            local Points = Found and Found:FindFirstChild("Points") 
            if Points then
                game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("Change_Value", Points, 99999999999)  
            end 
        end 
    end 
})

Ect:AddButton({
    Name = "Reset",
    Callback = function()
        Humanoid.Health = 0 
        task.wait(0.5)
        Humanoid.Health = 0
    end 
})

--// Actual Code \\--

-- Hàm cập nhật danh sách địa điểm & Bosses
function UpdateLists()
    local LocationsToUse, BossesToUse = {}, {}

    if SelectedMap == "Map1" then
        LocationsToUse = Map1List
        BossesToUse = BossesMap1List
    elseif SelectedMap == "Map2" then
        LocationsToUse = Map2List
        BossesToUse = BossesMap2List
    end

    -- Xóa Dropdown cũ nếu tồn tại
    if LocationsDropdown then
        LocationsDropdown:Remove()
    end
    if BossesDropdown then
        BossesDropdown:Remove()
    end

    -- Tạo Dropdown mới với danh sách cập nhật
    LocationsDropdown = Teleports:AddDropdown({
        Name = "Locations",
        Nothing = "Select Location...",
        Flag = "LocationSelect",
        List = LocationsToUse,
        Callback = function(State)
            SelectedArea = State
        end
    })

    BossesDropdown = Teleports:AddDropdown({
    Name = "Farm Bosses",
    Nothing = "ForCheckOnly",
    Flag = "BossSelect",
    List = (function()
        if not BossesToUse or type(BossesToUse) ~= "table" then

            return {}
        end

        local names = {}
        for index, boss in ipairs(BossesToUse) do
            if boss and type(boss) == "table" and boss.Name then
                table.insert(names, boss.Name)
            end
        end
        return names
    end)(),
    Callback = function(State)
        SelectedBoss = State
    end
})


    -- Gọi UpdateActiveBossLocations để cập nhật danh sách boss hiện tại
    UpdateActiveBossLocations()
end

function UpdateActiveBossLocations()
    ActiveBossLocations = {}

    -- Kiểm tra map hiện tại và cập nhật danh sách boss
    if SelectedMap == "Map1" then
        ActiveBossLocations = BossLocationsMap1
    elseif SelectedMap == "Map2" then
        ActiveBossLocations = BossLocationsMap2
    else
        return
    end

end

local placeId = game.PlaceId
local mapName

if placeId == 13883279773 then
    mapName = "Map1"
elseif placeId == 13883059853 then
    mapName = "Map2"
end

SelectedMap = mapName
UpdateLists()

--// Auto Collect Chest \\--
spawn(function()
    while task.wait() do
        if AutoCollectChest then
            for _, v in pairs(game:GetService("Workspace").Debree:GetChildren()) do
                if v.Name == "Loot_Chest" then
                    for i,c in pairs(v:FindFirstChild("Drops"):GetChildren()) do
                            v["Add_To_Inventory"]:InvokeServer(c.Name)
                            delay(0.5, function()
                            c:Destroy()
                        end)
                    end
                end
            end
		end 
		
    end
end)

--Eat souls--
task.spawn(function()
    while task.wait(0.5) do
        if AutoEatSouls then
            for _, v in pairs(workspace.Debree:GetChildren()) do
                if v.Name == "Soul" then
                    local Handle = v:FindFirstChild("Handle")
                    local Eat = Handle and Handle:FindFirstChild("Eatthedamnsoul")
                    if Eat then
                        Eat:FireServer()
                    end
                end
            end
        end
    end
end)


MiscSection:AddToggle({
    Name = "No Fog",
    Flag = "NF",
    Keybind = false,
    Callback = function (v)
        if v == true then
            for index, light in pairs(game:GetService("Lighting"):GetChildren()) do
                if light.Name == "Atmosphere" or string.find(light.Name, "Blur") or string.find(light.Name, "Bloom") then
                    light:Destroy()
                end
            end
            game:GetService("Lighting").FogEnd = 1000000

            if not getgenv().DisableDamageTextConnection then
                getgenv().DisableDamageTextConnection = game:GetService("RunService").Stepped:Connect(function()
                    local damageFolder = workspace:FindFirstChild("Debree") and workspace.Debree:FindFirstChild("Damage_Folder")
                    if damageFolder then
                        for _, dmgText in pairs(damageFolder:GetChildren()) do
                            if dmgText:IsA("Part") then
                                dmgText:Destroy()
                            end
                        end
                    end
                end)
            end

        elseif v == false then
            print("1")

            if getgenv().DisableDamageTextConnection then
                getgenv().DisableDamageTextConnection:Disconnect()
                getgenv().DisableDamageTextConnection = nil
            end
        end
    end
})


--// Inf iFrames \\--
spawn(function()
    while task.wait() do
        if ENG then
            local args = {
                [1] = "skil_ting_asd",
                [2] = game:GetService("Players").LocalPlayer,
                [3] = getgenv().GodSelected,
                [4] = 1
            }
            
            game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("To_Server"):WaitForChild("Handle_Initiate_S"):FireServer(unpack(args))
            task.wait(0.30)
        end
    end
end)

--// Damage Log Spoofer \\--
spawn(function()
    while task.wait() do
        if getgenv().hide_userdmg == true then
            local user = game:GetService("Players").LocalPlayer.Name
            if game:GetService("Players")[tostring(user)].PlayerGui["Pop_Ups"].Bosshp["Damage_Log"]:FindFirstChild(tostring(user)) then
            game:GetService("Players")[tostring(user)].PlayerGui["Pop_Ups"].Bosshp["Damage_Log"][tostring(user)].txt.Text = "Blackout Blackout Blackout"
            end
        end
    end
end)

--// Auto Med and Auto Split \\--
spawn(function()
    while task.wait() do
        if getgenv().AutoMed then
            pcall(function()
                game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["Meditate_gui"].Holder.LocalScript.Value.Value = 100
            end)
        end
    end
end)

spawn(function()
    while task.wait() do
        if getgenv().AutoSplit then
            pcall(function()
                game:GetService("Players").LocalPlayer.PlayerGui.ExcessGuis["boulder_split_ui"].Holder.LocalScript.Value.Value = 10000
            end)
        end
    end
end)

--// Kill Aura \\-- 
task.spawn(function()
    while task.wait() do
        if getgenv().KillAura then
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                    if (not debounce) and ((not game.Players.LocalPlayer:FindFirstChild("combotangasd123")) or game.Players.LocalPlayer:FindFirstChild("combotangasd123") and game.Players.LocalPlayer:FindFirstChild("combotangasd123").Value < 1) then 
                    debounce = true 
                    attack(attackMethods[Method])
                    task.wait(1.25)
                    debounce = false
                end
            end
        end
    end
end)



getgenv().Distance = 8
getgenv().tweenspeed = 300
SelectedBosses = selectedBosses


--// Farm \\--
function getclosestSkills(parentFolder)
    local closestEntity = nil
    local closestDistance = math.huge
    local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position
    local entities = parentFolder:GetDescendants()

    for _, entity in ipairs(entities) do
        if entity:IsA("Model") then
            local humanoid = entity:FindFirstChild("Humanoid")
            if humanoid and humanoid.Health > 0 then
				local modelCFrame = nil
				if entity.GetModelCFrame and type(entity.GetModelCFrame) == "function" then
					modelCFrame = entity:GetModelCFrame()
				end
				if modelCFrame then
					local distance = (entity:GetModelCFrame().Position - playerPosition).Magnitude
                	if distance < closestDistance then
                   		closestDistance = distance
                  		closestEntity = entity
					end
				end	

            end
        end
    end
    return closestEntity
end

    

function getClosestPlayer(selectedPlayerName)
    local closestPlayer = nil
    local closestDistance = math.huge

    local players = game:GetService("Players"):GetPlayers()
    local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

    for _, player in ipairs(players) do
        if player ~= game.Players.LocalPlayer and (not selectedPlayerName or player.Name == selectedPlayerName) then
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local distance = (character.HumanoidRootPart.Position - playerPosition).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    if closestPlayer then
        print("Closest Player:", closestPlayer.Name)
    else
        print("No Closest Player Found")
    end

    return closestPlayer
end


function getClosestPlayer1()
    local closestPlayer = nil
    local closestDistance = math.huge

    local players = game:GetService("Players"):GetPlayers()
    local playerPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.Position

    for _, player in ipairs(players) do
        if player ~= game.Players.LocalPlayer then
            local character = player.Character
            if character and character:FindFirstChild("HumanoidRootPart") then
                local distance = (character.HumanoidRootPart.Position - playerPosition).Magnitude
                if distance < closestDistance then
                    closestDistance = distance
                    closestPlayer = player
                end
            end
        end
    end

    if closestPlayer then
        print("Closest Player:", closestPlayer.Name)
    else
        print("No Closest Player Found")
    end

    return closestPlayer
end



--// Arrow Kill Aura \\--
local plr = game.Players.LocalPlayer
local arrow275Loop = nil

function resetArrow275()
    if arrow275Loop then
        task.cancel(arrow275Loop)
        arrow275Loop = nil
    end
end

function startArrow275Loop()
    resetArrow275()  
    arrow275Loop = task.spawn(function()
        while getgenv().Arrow do
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local parentFolder = game:GetService("Workspace").Mobs
                local v = getclosestSkills(parentFolder)

                while not v and getgenv().Arrow do
                    task.wait(0.5)
                    v = getclosestSkills(parentFolder)
                end

                local modelCFrame = nil
                if v and v.GetModelCFrame and type(v.GetModelCFrame) == "function" then
                    modelCFrame = v:GetModelCFrame()
                end

                while not modelCFrame and getgenv().Arrow do
                    task.wait(0.1)
                    if v and v.GetModelCFrame and type(v.GetModelCFrame) == "function" then
                        modelCFrame = v:GetModelCFrame()
                    end
                    if not v then
                        break
                    end
                end

                -- Kiểm tra HP trước khi bắn
                local humanoid = v and v:FindFirstChildOfClass("Humanoid")
                if modelCFrame and humanoid and humanoid.Health > 0 then
                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(
                        "arrow_knock_back_damage",
                        plr.Character,
                        modelCFrame,
                        v,
                        200,
                        200
                    )
                end
            end
            task.wait(0.275)
        end
        resetArrow275()
    end)
end


spawn(function()
    while task.wait() do
        if getgenv().Arrow then
            if not arrow275Loop then
                startArrow275Loop()
            end
        else
            resetArrow275()
        end
    end
end)



spawn(function()
    while task.wait() do
        if getgenv().Arrow or getgenv().TargetPlayersArrow or getgenv().AllArrow then
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S_:InvokeServer("skil_ting_asd",game:GetService("Players").LocalPlayer,"arrow_knock_back",5)
				task.wait(10)
            end
        end
    end
end)



spawn(function()
    while task.wait() do
        if getgenv().TargetPlayersArrow then
            if plr.Character and plr.Character:FindFirstChild("HumanoidRootPart") then
                local players = game:GetService("Players"):GetPlayers()
                local selectedPlayerName = getgenv().selectedPlayerName

                local closestPlayer = getClosestPlayer(selectedPlayerName)

                for _, player in ipairs(players) do
                    if player ~= game.Players.LocalPlayer and (closestPlayer == nil or player == closestPlayer) then
                        local character = player.Character
                        if character and character:FindFirstChild("HumanoidRootPart") then
                            if selectedPlayerName and player.Name == selectedPlayerName then
                                local targetCFrame = character.HumanoidRootPart.CFrame
                                for i = 1, 5 do
                                    print("Tried To Kill "..player.Name)
                                    game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer("arrow_knock_back_damage", game.Players.LocalPlayer.Character, targetCFrame, character, 99999, 99999)
                                    task.wait(0.2)
                                end
                                task.wait(1)
                            end
                        end
                    end
                end
            end
        end
    end
end)


--AuraArrow[NoLag]--
local plr = game.Players.LocalPlayer
local lastCharacter = nil
local arrowNoLagLoop = nil

function resetNoLagState()
    lastCharacter = nil
    if arrowNoLagLoop then
        task.cancel(arrowNoLagLoop)
        arrowNoLagLoop = nil
    end
end

function arrowNoLagAttackLoop()
    arrowNoLagLoop = task.spawn(function()
        while getgenv().AllArrow do
            if not plr.Character or not plr.Character:FindFirstChild("HumanoidRootPart") then
                resetNoLagState()
                break
            end

            local parentFolder = game:GetService("Workspace").Mobs
            local v = nil


            while not v and getgenv().AllArrow do
                v = getclosestSkills(parentFolder)
                task.wait(0.5) 
            end

            while getgenv().AllArrow do
                if not v or not v.Parent or (v:FindFirstChildOfClass("Humanoid") and v:FindFirstChildOfClass("Humanoid").Health <= 0) then
                    repeat
                        v = getclosestSkills(parentFolder)
                        task.wait(0.2) 
                    until v or not getgenv().AllArrow
                end


                if v and v.Parent then
                    local humanoid = v:FindFirstChildOfClass("Humanoid")
                    if humanoid and humanoid.Health > 0 then
                        local modelCFrame = v:GetModelCFrame()
                        if modelCFrame then
                            game:GetService("ReplicatedStorage").Remotes.To_Server.Handle_Initiate_S:FireServer(
                                "arrow_knock_back_damage",
                                plr.Character,
                                modelCFrame,
                                v,
                                200,
                                200
                            )
                        end
                    end
                end

                task.wait(0.15) 
            end
        end
    end)
end



spawn(function()
    while task.wait() do
        if getgenv().AllArrow then
            if plr.Character ~= lastCharacter then
                resetNoLagState()
                lastCharacter = plr.Character
                arrowNoLagAttackLoop()
            elseif not arrowNoLagLoop then
                arrowNoLagAttackLoop()
            end
        else
            resetNoLagState()
        end
    end
end)


--// NoClip \\--
local antifallActive = false 
spawn(function()
    game:GetService("RunService").Stepped:Connect(function()
        if getgenv().Farm or getgenv().MoveAround or AutoCollectLilys then
            for _, v in pairs(game:GetService("Players").LocalPlayer.Character:GetDescendants()) do
                if v:IsA("BasePart") then
                    v.CanCollide = false    
                end
                if v:IsA("Humanoid") then
                    v:ChangeState(11)
                end
            end
            if not antifallActive then  -- Check if no clip is already active
                antifallActive = true
                EnableAntiFall()
            end
        else
            if antifallActive then  -- Check if no clip is active
                antifallActive = false
                DisableAntiFall()
            end
        end
    end)
end)

--// Farm Method \\--
spawn(function()
    while wait() do
        SkillActive = AutoUseSkills and (getgenv().Farm and NearestMobs)
         if FarmMethod == "Above" then
                FarmModes = CFrame.new(0,getgenv().Distance,0) * CFrame.Angles(math.rad(-90),0,0)
            elseif FarmMethod == "Below" then
                FarmModes = CFrame.new(0,-getgenv().Distance,0) * CFrame.Angles(math.rad(90),0,0)
            elseif FarmMethod == "Behind" then
                FarmModes = CFrame.new(0,0,getgenv().Distance)
            end
    end
end)



--// Player Stats \\--
local plr = game.Players.LocalPlayer
local function updateLabels()
    local playerData = game:GetService("ReplicatedStorage").Player_Data[plr.Name]
    if playerData then
        local statText = ""
        statText = statText .. "Clan: " .. tostring(playerData.Clan.Value) .. "\n"
        statText = statText .. "Race: " .. raceTable[playerData.Race.Value] .. "\n"
        statText = statText .. "Demon Art Spins: " .. tostring(playerData.Demon_art_Spins.Value) .. "\n"
        statText = statText .. "Clan Spins: " .. tostring(playerData.Spins.Value) .. "\n"
        statText = statText .. "Yen: " .. tostring(playerData.Yen.Value) .. "\n"
        local demonProgressText = string.format("Demon Progress: %d/%d", playerData.DemonProgress[1].Value, playerData.DemonProgress[2].Value)
        statText = statText .. demonProgressText .. "\n"
        local breathingProgressText = string.format("Breathing Progress: %d/%d", playerData.BreathingProgress[1].Value, playerData.BreathingProgress[2].Value)
        statText = statText .. breathingProgressText

        infoLabel:Set(statText)
    end
end

repeat task.wait() until plr.Character and plr.Character:FindFirstChild("HumanoidRootPart")
local root = plr.Character:FindFirstChild("HumanoidRootPart")

plr.CharacterAdded:Connect(function()
    task.wait(0.5)
    setMovementStats()
end)


--AutoBoss--
local FarmLoop = nil
local VisitedBosses = {}

local function startFarmLoop()
    if FarmLoop then
        FarmLoop:Disconnect()
    end

    FarmLoop = task.spawn(function()
        local bossCount = #AllowedBosses
        local function waitForCharacter()
            local player = game.Players.LocalPlayer
            while not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") do
                player.CharacterAdded:Wait()
                task.wait(1)
            end
        end

        while getgenv().Farm do
            waitForCharacter()
            UpdateActiveBossLocations()

            if bossCount == 0 then
                task.wait(1)
                continue
            end

            local candidateBosses = {}
            for _, boss in pairs(ActiveBossLocations) do
                if not VisitedBosses[boss.Name] then
                    table.insert(candidateBosses, boss)
                end
            end

            if #candidateBosses == 0 then
                VisitedBosses = {} -- Reset khi đã thăm hết
                candidateBosses = ActiveBossLocations
            end

            table.sort(candidateBosses, function(a, b)
                return GetDistance(a.Position) < GetDistance(b.Position)
            end)

            local boss = candidateBosses[1]
            if not boss then
                task.wait(1)
                continue
            end

            local bossCFrame = CFrame.new(boss.Position)
            local TweenFa = Tween(bossCFrame)
		AtBoss = false

            repeat
                task.wait()
                if not game.Players.LocalPlayer.Character then
                    if TweenFa then
                        TweenFa:Cancel()
                        TweenFa = nil
                    end
                    break
                end
            until not getgenv().Farm or GetDistance(bossCFrame) < 20

            if not getgenv().Farm then break end
            if TweenFa then
                TweenFa:Cancel()
                TweenFa = nil
            end

            local bossEntity = getclosest({boss.Name}, game:GetService("Workspace").Mobs)
            if bossEntity and bossEntity:FindFirstChild("Humanoid") then
                while getgenv().Farm and bossEntity.Parent and bossEntity.Humanoid.Health > 0 do
                    if not game.Players.LocalPlayer.Character then
                        break
                    end
                    task.wait()

                    local entityCFrame = bossEntity:GetModelCFrame() * FarmModes
                    if GetDistance(entityCFrame) >= 25 and GetDistance(entityCFrame) < 150 then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = entityCFrame
                    else
                        if not TweenFa then
                            TweenFa = Tween(entityCFrame)
                        end
                    end
                    AtBoss = GetDistance(entityCFrame) < 25
                end
            else
                task.wait(1)
            end

            VisitedBosses[boss.Name] = true
	UpdateActiveBossLocations()
        end
    end)
end

game.Players.LocalPlayer.CharacterAdded:Connect(function()
    if getgenv().Farm then
        startFarmLoop()
    end
end)

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().Farm and not FarmLoop then
        startFarmLoop()
    elseif not getgenv().Farm and FarmLoop then
        task.cancel(FarmLoop)
        FarmLoop = nil
    end
end)



--MoveAround--
            
local MoveLoop = nil
local VisitedBosses = {}

local function startMoveLoop()
    if MoveLoop then
        MoveLoop:Disconnect()
    end
    
    MoveLoop = task.spawn(function()
        while getgenv().MoveAround do
            local player = game.Players.LocalPlayer
            if not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
                player.CharacterAdded:Wait()
                task.wait(1)
            end
            
            UpdateActiveBossLocations()
            if #ActiveBossLocations == 0 then
                task.wait(1)
                continue
            end

            local candidateBosses = {}
            for _, boss in pairs(ActiveBossLocations) do
                if not VisitedBosses[boss.Name] then
                    table.insert(candidateBosses, boss)
                end
            end

            if #candidateBosses == 0 then
                VisitedBosses = {} -- Reset lại khi đi hết boss
                candidateBosses = ActiveBossLocations
            end

            table.sort(candidateBosses, function(a, b)
                return GetDistance(a.Position) < GetDistance(b.Position)
            end)

            local boss = candidateBosses[1]
            if not boss then
                task.wait(1)
                continue
            end

            local bossCFrame = CFrame.new(boss.Position)
            local TweenFa = Tween(bossCFrame)

            repeat
                task.wait()
                if not game.Players.LocalPlayer.Character then
                    if TweenFa then
                        TweenFa:Cancel()
                        TweenFa = nil
                    end
                    break
                end
            until not getgenv().MoveAround or GetDistance(bossCFrame) < 20

            if not getgenv().MoveAround then break end
            if TweenFa then
                TweenFa:Cancel()
                TweenFa = nil
            end

            VisitedBosses[boss.Name] = true
	UpdateActiveBossLocations()
            task.wait(1) -- Dừng 1 giây trước khi đi tiếp boss khác
        end
    end)
end

game:GetService("RunService").Heartbeat:Connect(function()
    if getgenv().MoveAround and not MoveLoop then
        startMoveLoop()
    elseif not getgenv().MoveAround and MoveLoop then
        task.cancel(MoveLoop)
        MoveLoop = nil
    end
end)


--// Update Labels / Dropdowns \\--
spawn(function()
    while task.wait(4) do
        updateLabels()
    end
end)

local VirtualUser = game:GetService("VirtualUser")
local Players = game:GetService("Players")

-- Hàm tạo thời gian random kiểu tự nhiên, có lúc nhanh lúc chậm
local function naturalWaitTime()
    local baseTime = 600 -- 10 phút
    local offset = math.random(-120, 180) -- lệch ngẫu nhiên từ -2 phút đến +3 phút
    return math.max(300, baseTime + offset) -- đảm bảo tối thiểu 5 phút
end

spawn(function()
    while true do
        wait(naturalWaitTime()) 
        if Players.LocalPlayer and Players.LocalPlayer.Character then
            VirtualUser:CaptureController()
            VirtualUser:ClickButton2(Vector2.new(math.random(100, 1820), math.random(100, 980))) 
        end
    end
end)

---Nhặt Hoa---
local TweenService = game:GetService("TweenService")
local flowers = game:GetService("Workspace"):WaitForChild("Demon_Flowers_Spawn")
local Player = game.Players.LocalPlayer

local AutoCollectLilys = false
local failedFlowers = {}
local collectingThread = nil


local lastFlowerCollectedTime = tick()
local resetting = false


local function EnableAntiFall()
    local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if hrp and not hrp:FindFirstChild("BodyVelocity") then
        local antifall = Instance.new("BodyVelocity")
        antifall.Velocity = Vector3.new(0, 0, 0)
        antifall.MaxForce = Vector3.new(9e9, 9e9, 9e9)
        antifall.Name = "BodyVelocity"
        antifall.Parent = hrp
    end
end

local function DisableAntiFall()
    local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    local humanoid = Player.Character and Player.Character:FindFirstChildOfClass("Humanoid")
    local antifall = hrp and hrp:FindFirstChild("BodyVelocity")

    if antifall then antifall:Destroy() end
    if hrp then
        hrp.Velocity, hrp.AssemblyLinearVelocity = Vector3.zero, Vector3.zero
    end
    if humanoid then
        humanoid.PlatformStand = false
        humanoid:ChangeState(Enum.HumanoidStateType.GettingUp)
        task.wait(0.1)
        humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
    end
end


local function isCharacterValid()
    local character = Player.Character
    return character and character.Parent and character:FindFirstChild("HumanoidRootPart")
end

local function fireproximityprompt(prompt)
    if prompt then
        prompt.HoldDuration = 0
        prompt:InputHoldBegin()
        task.wait(0.5)
        prompt:InputHoldEnd()
    end
end

local function TweenToPosition(pos, speed)
    local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil, 0 end

    local distance = (hrp.Position - pos).Magnitude
    local tween = TweenService:Create(hrp, TweenInfo.new(distance / speed, Enum.EasingStyle.Linear), {CFrame = CFrame.new(pos)})
    tween:Play()
    return tween, distance / speed
end

local function getNearestFlower()
    local hrp = Player.Character and Player.Character:FindFirstChild("HumanoidRootPart")
    if not hrp then return nil end

    local nearest, minDist = nil, math.huge
    for _, flower in pairs(flowers:GetChildren()) do
        if flower:IsA("Model") and (not failedFlowers[flower] or tick() - failedFlowers[flower] > 30) then
            local dist = (hrp.Position - flower.WorldPivot.Position).Magnitude
            if dist < minDist then
                nearest, minDist = flower, dist
            end
        end
    end
    return nearest
end

local function safeMoveToFlower(flower)
    if not flower or not flower.Parent then return false end

    local tween, duration = TweenToPosition(flower.WorldPivot.Position, 250)
    local start = tick()

    while tick() - start < duration + 1 do
        task.wait()
        if not isCharacterValid() or not flower.Parent then
            tween:Cancel()
            return false
        end
        if tween.PlaybackState ~= Enum.PlaybackState.Playing then break end
    end

    tween:Cancel()
    return isCharacterValid()
end

local function tryCollectFlower(flower)
     if not flower or type(flower) ~= "Instance" or not flower.Parent then 
        return true
    end

    for _, obj in ipairs(flower:GetDescendants()) do
        if obj:IsA("ProximityPrompt") then
            task.wait(0.2)
            for _ = 1, 3 do
                fireproximityprompt(obj)
                task.wait(0.2)
                if not flower.Parent then return true end
            end
        end
    end

    local timeout = tick() + 3
    while tick() < timeout do
        if not flower.Parent then return true end
        task.wait(0.2)
    end
    return false
end

local function resetCharacter()
    if resetting or not isCharacterValid() then return end

    resetting = true
    local humanoid = Player.Character:FindFirstChildOfClass("Humanoid")
    if humanoid then
        humanoid.Health = 0
        task.wait(0.5)
        humanoid.Health = 0
    end
    task.wait(5)
    resetting = false
end


local function startCollecting()
    if collectingThread then return end

    AutoCollectLilys, lastFlowerCollectedTime = true, tick()
    EnableAntiFall()

    collectingThread = task.spawn(function()
        while AutoCollectLilys do
            if not isCharacterValid() then repeat task.wait(1) until isCharacterValid() end

            -- Clean failed flowers cache
            for flower, lastFail in pairs(failedFlowers) do
                if not flower.Parent or tick() - lastFail > 30 then
                    failedFlowers[flower] = nil
                end
            end

            local flower = getNearestFlower()
            if not flower then
                task.wait(1)
                continue
            end

            if safeMoveToFlower(flower) and tryCollectFlower(flower) then
                failedFlowers[flower] = nil
                lastFlowerCollectedTime = tick()
            else
                failedFlowers[flower] = tick()
            end

            if tick() - lastFlowerCollectedTime > 20 then
                resetCharacter()
            end

            task.wait(0.5)
        end

        DisableAntiFall()
        collectingThread = nil
    end)
end

local function stopCollecting()
    AutoCollectLilys = false
    if collectingThread then
        task.cancel(collectingThread)
        collectingThread = nil
    end
    DisableAntiFall()
end

local function CharacterAdded(character)
    character:WaitForChild("HumanoidRootPart")
end

Player.CharacterAdded:Connect(CharacterAdded)
if Player.Character then CharacterAdded(Player.Character) end


MiscSection:AddToggle({
    Name = "Auto Collect Lilys",
    Flag = "CollectAllLilys",
    Keybind = false,
    Callback = function(v)
        if v then startCollecting() else stopCollecting() end
    end
})


--FindMuzan--
local teleportToMuzanEnabled = false

local function teleportToMuzan()
    task.spawn(function()
        local players = game:GetService("Players")
        local localPlayer = players.LocalPlayer
        local character = localPlayer.Character or localPlayer.CharacterAdded:Wait()
        local hrp = character:WaitForChild("HumanoidRootPart")

        local function getMuzanSpawnPos()
            local muzan = workspace:FindFirstChild("Muzan")
            if muzan and muzan:FindFirstChild("SpawnPos") then
                return muzan.SpawnPos.Value
            end
            return nil
        end

        local muzanPos = getMuzanSpawnPos()

        if muzanPos then
            local offset = Vector3.new(10, 5, 0)
            local targetPos = muzanPos + offset

            hrp.CFrame = CFrame.new(targetPos)

            teleportToMuzanEnabled = false 
        end
    end)
end

MiscSection:AddToggle({
    Name = "Auto Teleport to Muzan",
    Flag = "AutoTPMuzan",
    Callback = function(state)
        teleportToMuzanEnabled = state
        if state then
            teleportToMuzan()
        end
    end
})
